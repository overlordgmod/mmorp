const { Client, GatewayIntentBits, Partials, PermissionsBitField } = require('discord.js');
const { db } = require('./firebase');
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.DirectMessages
    ],
    partials: [Partials.Channel]
});

const config = require('./config.json');

// –°—Å—ã–ª–∫–∞ –Ω–∞ Firebase –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const blockedUsersRef = db.ref('blockedUsers');

client.on('ready', () => {
    console.log(`Logged in as ${client.user.tag}!`);
});

client.on('messageCreate', async message => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if (message.author.bot) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
        return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ /mute
    if (message.content.startsWith('/mute')) {
        const args = message.content.split(' ');
        if (args.length < 3) {
            return message.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/mute <–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö> <discord id>`');
        }

        const timeMinutes = parseInt(args[1]);
        const targetUserId = args[2];

        if (isNaN(timeMinutes) || timeMinutes <= 0) {
            return message.reply('–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –≤ –º–∏–Ω—É—Ç–∞—Ö.');
        }

        if (!/^\d{17,19}$/.test(targetUserId)) {
            return message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π Discord ID.');
        }

        try {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase
            const blockData = {
                until: Date.now() + (timeMinutes * 60 * 1000),
                reason: `Muted by ${message.author.tag} for ${timeMinutes} minutes`,
                moderator: message.author.id,
                timestamp: Date.now()
            };

            await blockedUsersRef.child(targetUserId).set(blockData);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            const embed = {
                color: 0xff6b6b,
                title: 'üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                fields: [
                    {
                        name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        value: `<@${targetUserId}> (${targetUserId})`,
                        inline: true
                    },
                    {
                        name: '–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
                        value: `${timeMinutes} –º–∏–Ω—É—Ç`,
                        inline: true
                    },
                    {
                        name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                        value: message.author.tag,
                        inline: true
                    },
                    {
                        name: '–î–æ',
                        value: `<t:${Math.floor((Date.now() + timeMinutes * 60 * 1000) / 1000)}:F>`,
                        inline: false
                    }
                ],
                timestamp: new Date()
            };

            await message.reply({ embeds: [embed] });
        } catch (error) {
            console.error('Error muting user:', error);
            await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ /unmute
    if (message.content.startsWith('/unmute')) {
        const args = message.content.split(' ');
        if (args.length < 2) {
            return message.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/unmute <discord id>`');
        }

        const targetUserId = args[1];

        if (!/^\d{17,19}$/.test(targetUserId)) {
            return message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π Discord ID.');
        }

        try {
            // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–∑ Firebase
            await blockedUsersRef.child(targetUserId).remove();

            const embed = {
                color: 0x51cf66,
                title: 'üîä –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞',
                fields: [
                    {
                        name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        value: `<@${targetUserId}> (${targetUserId})`,
                        inline: true
                    },
                    {
                        name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                        value: message.author.tag,
                        inline: true
                    }
                ],
                timestamp: new Date()
            };

            await message.reply({ embeds: [embed] });
        } catch (error) {
            console.error('Error unmuting user:', error);
            await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.');
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ /ban
    if (message.content.startsWith('/ban')) {
        const args = message.content.split(' ');
        if (args.length < 2) {
            return message.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/ban <discord id>`');
        }

        const targetUserId = args[1];

        if (!/^\d{17,19}$/.test(targetUserId)) {
            return message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π Discord ID.');
        }

        try {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–≤—Å–µ–≥–¥–∞ –≤ Firebase
            const blockData = {
                until: Date.now() + (365 * 24 * 60 * 60 * 1000), // 1 –≥–æ–¥ (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–≤—Å–µ–≥–¥–∞)
                reason: `Banned by ${message.author.tag}`,
                moderator: message.author.id,
                timestamp: Date.now(),
                permanent: true
            };

            await blockedUsersRef.child(targetUserId).set(blockData);

            const embed = {
                color: 0xff0000,
                title: 'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω',
                fields: [
                    {
                        name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        value: `<@${targetUserId}> (${targetUserId})`,
                        inline: true
                    },
                    {
                        name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                        value: message.author.tag,
                        inline: true
                    },
                    {
                        name: '–°—Ç–∞—Ç—É—Å',
                        value: '–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞',
                        inline: true
                    }
                ],
                timestamp: new Date()
            };

            await message.reply({ embeds: [embed] });
        } catch (error) {
            console.error('Error banning user:', error);
            await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ /unban
    if (message.content.startsWith('/unban')) {
        const args = message.content.split(' ');
        if (args.length < 2) {
            return message.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/unban <discord id>`');
        }

        const targetUserId = args[1];

        if (!/^\d{17,19}$/.test(targetUserId)) {
            return message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π Discord ID.');
        }

        try {
            // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–∑ Firebase
            await blockedUsersRef.child(targetUserId).remove();

            const embed = {
                color: 0x51cf66,
                title: '‚úÖ –ë–∞–Ω —Å–Ω—è—Ç',
                fields: [
                    {
                        name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        value: `<@${targetUserId}> (${targetUserId})`,
                        inline: true
                    },
                    {
                        name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                        value: message.author.tag,
                        inline: true
                    }
                ],
                timestamp: new Date()
            };

            await message.reply({ embeds: [embed] });
        } catch (error) {
            console.error('Error unbanning user:', error);
            await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –±–∞–Ω–∞.');
        }
    }

    // –ö–æ–º–∞–Ω–¥–∞ /blockstatus
    if (message.content.startsWith('/blockstatus')) {
        const args = message.content.split(' ');
        if (args.length < 2) {
            return message.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/blockstatus <discord id>`');
        }

        const targetUserId = args[1];

        if (!/^\d{17,19}$/.test(targetUserId)) {
            return message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π Discord ID.');
        }

        try {
            const blockSnapshot = await blockedUsersRef.child(targetUserId).once('value');
            const blockData = blockSnapshot.val();

            if (!blockData) {
                const embed = {
                    color: 0x51cf66,
                    title: '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                    fields: [
                        {
                            name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                            value: `<@${targetUserId}> (${targetUserId})`,
                            inline: true
                        }
                    ],
                    timestamp: new Date()
                };
                await message.reply({ embeds: [embed] });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if (blockData.until && blockData.until < Date.now()) {
                await blockedUsersRef.child(targetUserId).remove();
                const embed = {
                    color: 0x51cf66,
                    title: '‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞',
                    fields: [
                        {
                            name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                            value: `<@${targetUserId}> (${targetUserId})`,
                            inline: true
                        },
                        {
                            name: '–°—Ç–∞—Ç—É—Å',
                            value: '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω—è—Ç–∞',
                            inline: true
                        }
                    ],
                    timestamp: new Date()
                };
                await message.reply({ embeds: [embed] });
                return;
            }

            const timeLeft = blockData.until - Date.now();
            const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
            const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            const daysLeft = Math.floor(hoursLeft / 24);

            let timeMessage = '';
            if (blockData.permanent) {
                timeMessage = '–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞';
            } else if (daysLeft > 0) {
                timeMessage = `${daysLeft}–¥ ${hoursLeft % 24}—á ${minutesLeft}–º`;
            } else if (hoursLeft > 0) {
                timeMessage = `${hoursLeft}—á ${minutesLeft}–º`;
            } else {
                timeMessage = `${minutesLeft}–º`;
            }

            const embed = {
                color: blockData.permanent ? 0xff0000 : 0xff6b6b,
                title: blockData.permanent ? 'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω' : 'üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                fields: [
                    {
                        name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        value: `<@${targetUserId}> (${targetUserId})`,
                        inline: true
                    },
                    {
                        name: '–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏',
                        value: timeMessage,
                        inline: true
                    },
                    {
                        name: '–ü—Ä–∏—á–∏–Ω–∞',
                        value: blockData.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                        inline: false
                    },
                    {
                        name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                        value: blockData.moderator ? `<@${blockData.moderator}>` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        inline: true
                    },
                    {
                        name: '–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏',
                        value: `<t:${Math.floor(blockData.timestamp / 1000)}:F>`,
                        inline: true
                    }
                ],
                timestamp: new Date()
            };

            await message.reply({ embeds: [embed] });
        } catch (error) {
            console.error('Error checking block status:', error);
            await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º
    if (message.channel.type === 'DM') {
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            const supportChannel = await client.channels.fetch(config.supportChannelId);
            if (supportChannel) {
                await supportChannel.send({
                    embeds: [{
                        title: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                        description: message.content,
                        color: 0xb891f9,
                        fields: [
                            {
                                name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                                value: `${message.author.tag} (${message.author.id})`,
                                inline: true
                            }
                        ],
                        timestamp: new Date()
                    }]
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
            }
        } catch (error) {
            console.error('Error handling DM:', error);
            await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
});

client.login(config.token); 
